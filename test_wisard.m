addpath('mnistHelper');


%% load dataset

MNIST_PATH = '/Volumes/DADOS/Code/WiSARD_imp/python-mnist/data/';

images_train = loadMNISTImages([MNIST_PATH 'train-images-idx3-ubyte']);
labels_train = cellstr(num2str(loadMNISTLabels([MNIST_PATH 'train-labels-idx1-ubyte'])));

images_test = loadMNISTImages([MNIST_PATH 't10k-images-idx3-ubyte']);
labels_test = cellstr(num2str(loadMNISTLabels([MNIST_PATH 't10k-labels-idx1-ubyte'])));


% train_images = images(:, 1:1000);
% train_labels = labels(1:1000);
% test_images = images(:, 1001:1500);
% test_labels = labels(1001:1500);

%% binarize images
train_imagesb = train_images > 0;
test_imagesb = test_images > 0;

% % transpose image to match python
% for i=1:size(train_imagesb, 2)
%     tmp = reshape(train_imagesb(:, i), 28, 28)';
%     train_imagesb(:,i) = tmp(:);
% end
% 
% for i=1:size(test_imagesb, 2)
%     tmp = reshape(test_imagesb(:, i), 28, 28)';
%     test_imagesb(:,i) = tmp(:);
% end
% LEVELS = 6;
% 
% train_imagesb = [];
% for i = 1 : size(train_images, 2)
%     image = thermometerize(train_images(:, i), LEVELS);
%     train_imagesb(:, i) = image(:);
% end
% 
% test_imagesb = [];
% for i = 1 : size(test_images, 2)
%     image = thermometerize(test_images(:, i), LEVELS);
%     test_imagesb(:, i) = image(:);
% end

% fix random order for comparison with python implementation
%bits_order = [349, 171, 483, 278, 103, 453, 538, 389, 147, 234, 241, 643, 624, 487, 703, 452, 303, 339, 172, 732, 758, 300, 464, 706, 227, 141, 640, 398, 214, 428, 466, 575, 754, 757, 317, 756, 460, 283, 485, 633, 66, 20, 19, 472, 561, 375, 776, 211, 540, 415, 110, 38, 150, 619, 9, 580, 553, 772, 748, 293, 564, 40, 123, 402, 265, 696, 438, 626, 458, 672, 279, 569, 199, 478, 554, 735, 408, 240, 421, 666, 492, 188, 727, 21, 639, 449, 390, 454, 418, 294, 761, 8, 10, 750, 546, 618, 112, 322, 382, 500, 572, 306, 146, 432, 585, 740, 534, 212, 98, 63, 334, 204, 30, 207, 660, 208, 774, 556, 582, 683, 314, 155, 229, 7, 779, 217, 718, 411, 610, 497, 127, 70, 86, 599, 33, 275, 514, 515, 366, 531, 594, 675, 524, 193, 282, 647, 444, 273, 221, 518, 378, 224, 430, 272, 499, 24, 298, 450, 137, 373, 139, 370, 419, 484, 609, 67, 357, 335, 617, 665, 386, 92, 57, 532, 218, 598, 347, 549, 49, 658, 661, 765, 494, 691, 451, 13, 721, 336, 356, 385, 77, 692, 177, 168, 364, 206, 667, 652, 71, 239, 671, 649, 285, 743, 134, 722, 72, 702, 544, 121, 547, 290, 81, 775, 550, 467, 687, 694, 15, 470, 742, 246, 519, 138, 126, 700, 259, 481, 291, 203, 225, 417, 465, 729, 17, 638, 301, 342, 156, 462, 653, 632, 783, 533, 34, 286, 152, 670, 311, 258, 106, 125, 352, 490, 751, 108, 445, 94, 752, 344, 107, 210, 264, 399, 231, 367, 690, 215, 604, 276, 196, 220, 713, 720, 737, 566, 443, 753, 388, 708, 605, 60, 354, 175, 463, 167, 395, 642, 477, 213, 219, 318, 96, 441, 238, 308, 669, 480, 136, 504, 577, 557, 496, 237, 489, 371, 200, 461, 120, 616, 228, 747, 148, 530, 235, 704, 358, 372, 37, 154, 164, 82, 709, 407, 181, 304, 622, 560, 578, 176, 59, 68, 668, 725, 310, 307, 230, 132, 507, 469, 90, 302, 247, 420, 359, 65, 162, 284, 260, 83, 505, 674, 682, 191, 705, 592, 396, 759, 289, 117, 738, 657, 512, 3, 498, 581, 353, 648, 381, 591, 161, 277, 22, 387, 508, 216, 202, 330, 341, 523, 645, 762, 254, 153, 764, 340, 251, 422, 46, 29, 75, 52, 131, 194, 53, 455, 243, 315, 25, 109, 760, 118, 361, 627, 600, 166, 105, 257, 323, 16, 189, 252, 11, 333, 88, 325, 413, 606, 271, 288, 717, 488, 28, 412, 699, 169, 574, 287, 249, 47, 781, 427, 380, 186, 440, 269, 587, 726, 64, 299, 319, 437, 680, 493, 715, 613, 684, 51, 104, 491, 471, 80, 567, 45, 716, 623, 728, 656, 6, 242, 552, 501, 346, 425, 403, 348, 18, 362, 644, 433, 767, 157, 414, 755, 226, 244, 678, 503, 739, 198, 268, 416, 768, 332, 482, 686, 486, 114, 329, 401, 662, 595, 245, 448, 651, 190, 320, 741, 777, 248, 391, 731, 673, 365, 222, 763, 659, 170, 601, 733, 510, 316, 679, 267, 119, 140, 689, 734, 712, 697, 771, 39, 410, 54, 97, 565, 262, 479, 495, 446, 261, 397, 641, 746, 589, 698, 350, 459, 324, 331, 74, 355, 50, 270, 548, 431, 61, 545, 474, 36, 502, 266, 516, 517, 159, 135, 256, 185, 250, 584, 374, 663, 710, 607, 520, 769, 393, 583, 195, 343, 128, 611, 551, 468, 602, 426, 41, 360, 537, 102, 327, 628, 201, 369, 521, 233, 79, 597, 637, 778, 681, 535, 43, 160, 44, 321, 122, 630, 576, 263, 525, 124, 130, 636, 326, 429, 770, 55, 338, 158, 85, 434, 766, 409, 205, 115, 180, 650, 586, 635, 232, 163, 724, 509, 309, 406, 296, 400, 78, 383, 274, 570, 435, 197, 379, 596, 116, 363, 693, 48, 685, 73, 95, 1, 457, 76, 701, 475, 588, 173, 187, 111, 625, 32, 615, 621, 328, 376, 424, 2, 255, 0, 295, 526, 571, 89, 93, 5, 603, 394, 253, 27, 377, 423, 297, 26, 579, 719, 58, 730, 91, 151, 113, 183, 511, 281, 527, 782, 84, 280, 99, 780, 542, 744, 236, 142, 522, 590, 563, 345, 506, 677, 337, 707, 292, 541, 405, 144, 404, 614, 145, 620, 35, 62, 676, 392, 559, 612, 209, 178, 688, 473, 184, 543, 773, 736, 539, 100, 174, 558, 312, 476, 654, 447, 165, 593, 646, 573, 69, 129, 608, 695, 149, 634, 555, 351, 529, 439, 87, 179, 56, 568, 456, 711, 723, 629, 368, 42, 384, 23, 223, 513, 745, 562, 12, 14, 655, 442, 536, 714, 143, 436, 631, 31, 749, 305, 101, 182, 313, 528, 664, 192, 4, 133] + 1;

classes = sort(unique(labels));
input_size = size(train_imagesb, 1);
nbits = 8;
accuracies = [];
thresholds = [0 0.01 0.0625 0.125 0.25 0.5 0.75 0.9 0.95];
for i = 1:length(thresholds)

    w = WiSARD( classes, input_size, nbits); %, bits_order );
    w.train(train_imagesb', train_labels);
    w.bleach('discretize', thresholds(i) );
    
    
    [y, results] = w.test(test_imagesb');
    accuracies(i) = sum(strcmp(y, test_labels')) / length(y)
end



